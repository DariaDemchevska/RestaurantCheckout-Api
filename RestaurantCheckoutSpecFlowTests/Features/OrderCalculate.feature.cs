// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestaurantCheckoutSpecFlowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OrderCalculate")]
    public partial class OrderCalculateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "OrderCalculate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "OrderCalculate", "Check if an endpoint that calculates the total of the order and adds a 10% servic" +
                    "e charge on food.\r\nDrinks have a 30% discount when ordered before 19:00", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A group of 4 people orders 4 starters, 4 mains and 4 drinks")]
        [NUnit.Framework.CategoryAttribute("Scenario1")]
        public virtual void AGroupOf4PeopleOrders4Starters4MainsAnd4Drinks()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A group of 4 people orders 4 starters, 4 mains and 4 drinks", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "CustomerId",
                            "Starter",
                            "Main",
                            "Drink",
                            "Time"});
                table1.AddRow(new string[] {
                            "1",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 19:00:00"});
                table1.AddRow(new string[] {
                            "2",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 19:00:00"});
                table1.AddRow(new string[] {
                            "3",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 19:00:00"});
                table1.AddRow(new string[] {
                            "4",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 19:00:00"});
#line 8
 testRunner.Given("Group of people makes an order", ((string)(null)), table1, "Given ");
#line hidden
#line 14
 testRunner.When("the order is sent to the endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExpectedTotal"});
                table2.AddRow(new string[] {
                            "58.4"});
#line 15
 testRunner.Then("the total is calculated correctly", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. Two pe" +
            "ople join at 20:00 who order 2 mains and 2 drinks")]
        [NUnit.Framework.CategoryAttribute("Scenario2")]
        public virtual void AGroupOf2PeopleOrder1StarterAnd2MainsAnd2DrinksBefore1900_TwoPeopleJoinAt2000WhoOrder2MainsAnd2Drinks()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. Two pe" +
                    "ople join at 20:00 who order 2 mains and 2 drinks", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "CustomerId",
                            "Starter",
                            "Main",
                            "Drink",
                            "Time"});
                table3.AddRow(new string[] {
                            "1",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 18:59:00"});
                table3.AddRow(new string[] {
                            "2",
                            "0",
                            "7",
                            "2.5",
                            "03/08/2022 18:59:00"});
#line 21
 testRunner.Given("Group of people makes an order", ((string)(null)), table3, "Given ");
#line hidden
#line 25
 testRunner.When("the order is sent to the endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExpectedTotal"});
                table4.AddRow(new string[] {
                            "23.3"});
#line 26
 testRunner.Then("the total is calculated correctly", ((string)(null)), table4, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "CustomerId",
                            "Starter",
                            "Main",
                            "Drink",
                            "Time"});
                table5.AddRow(new string[] {
                            "3",
                            "0",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
                table5.AddRow(new string[] {
                            "4",
                            "0",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
#line 29
 testRunner.And("more people joined who order", ((string)(null)), table5, "And ");
#line hidden
#line 33
 testRunner.When("the order is sent to the endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExpectedTotal"});
                table6.AddRow(new string[] {
                            "43.7"});
#line 34
 testRunner.Then("the total is calculated correctly", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A group of 4 people order 4 starters, 4 mains and 4 drinks. 1 person cancels thei" +
            "r order so the order is 3 starters, 3 mains and 3 drinks")]
        [NUnit.Framework.CategoryAttribute("Scenario3")]
        public virtual void AGroupOf4PeopleOrder4Starters4MainsAnd4Drinks_1PersonCancelsTheirOrderSoTheOrderIs3Starters3MainsAnd3Drinks()
        {
            string[] tagsOfScenario = new string[] {
                    "Scenario3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A group of 4 people order 4 starters, 4 mains and 4 drinks. 1 person cancels thei" +
                    "r order so the order is 3 starters, 3 mains and 3 drinks", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "CustomerId",
                            "Starter",
                            "Main",
                            "Drink",
                            "Time"});
                table7.AddRow(new string[] {
                            "1",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
                table7.AddRow(new string[] {
                            "2",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
                table7.AddRow(new string[] {
                            "3",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
                table7.AddRow(new string[] {
                            "4",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
#line 40
 testRunner.Given("Group of people makes an order", ((string)(null)), table7, "Given ");
#line hidden
#line 46
 testRunner.When("the order is sent to the endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExpectedTotal"});
                table8.AddRow(new string[] {
                            "58.4"});
#line 47
 testRunner.Then("the total is calculated correctly", ((string)(null)), table8, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "CustomerId",
                            "Starter",
                            "Main",
                            "Drink",
                            "Time"});
                table9.AddRow(new string[] {
                            "4",
                            "4",
                            "7",
                            "2.5",
                            "03/08/2022 20:00:00"});
#line 50
 testRunner.And("some people cancel the order", ((string)(null)), table9, "And ");
#line hidden
#line 53
 testRunner.When("the order is sent to the endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExpectedTotal"});
                table10.AddRow(new string[] {
                            "43.8"});
#line 54
 testRunner.Then("the total is calculated correctly", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
